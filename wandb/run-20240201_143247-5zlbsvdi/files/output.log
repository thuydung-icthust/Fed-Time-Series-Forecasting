INFO logger 2024-02-01 14:32:52,624 | data_utils.py:383 | Observations info in ElBorn
INFO logger 2024-02-01 14:32:52,628 | data_utils.py:384 | 	Total number of samples:  4192
INFO logger 2024-02-01 14:32:52,628 | data_utils.py:385 | 	Number of samples for training: 3354
INFO logger 2024-02-01 14:32:52,628 | data_utils.py:386 | 	Number of samples for validation:  838
INFO logger 2024-02-01 14:32:52,631 | data_utils.py:383 | Observations info in LesCorts
INFO logger 2024-02-01 14:32:52,631 | data_utils.py:384 | 	Total number of samples:  6892
INFO logger 2024-02-01 14:32:52,631 | data_utils.py:385 | 	Number of samples for training: 5514
INFO logger 2024-02-01 14:32:52,631 | data_utils.py:386 | 	Number of samples for validation:  1378
INFO logger 2024-02-01 14:32:52,643 | data_utils.py:383 | Observations info in PobleSec
INFO logger 2024-02-01 14:32:52,643 | data_utils.py:384 | 	Total number of samples:  15927
INFO logger 2024-02-01 14:32:52,643 | data_utils.py:385 | 	Number of samples for training: 12742
INFO logger 2024-02-01 14:32:52,643 | data_utils.py:386 | 	Number of samples for validation:  3185
INFO logger 2024-02-01 14:32:52,658 | data_utils.py:389 | Observations info using all data
INFO logger 2024-02-01 14:32:52,663 | data_utils.py:390 | 	Total number of samples:  27011
INFO logger 2024-02-01 14:32:52,664 | data_utils.py:391 | 	Number of samples for training: 21610
INFO logger 2024-02-01 14:32:52,664 | data_utils.py:392 | 	Number of samples for validation:  5401
INFO logger 2024-02-01 14:32:52,664 | data_utils.py:118 | Using Flooring and Capping and with params: {'ElBorn': (10, 90), 'LesCorts': (10, 90), 'PobleSec': (5, 95)}
Clients participating training are: dict_keys(['ElBorn', 'LesCorts', 'PobleSec'])
INFO logger 2024-02-01 14:32:54,364 | server.py:71 | Initializing client manager...
INFO logger 2024-02-01 14:32:54,369 | server.py:78 | Registering clients...
INFO logger 2024-02-01 14:32:54,369 | client_manager.py:66 | Registered client with id: ElBorn_0
INFO logger 2024-02-01 14:32:54,369 | client_manager.py:66 | Registered client with id: ElBorn_1
INFO logger 2024-02-01 14:32:54,369 | client_manager.py:66 | Registered client with id: ElBorn_2
INFO logger 2024-02-01 14:32:54,369 | client_manager.py:66 | Registered client with id: ElBorn_3
INFO logger 2024-02-01 14:32:54,369 | client_manager.py:66 | Registered client with id: ElBorn_4
INFO logger 2024-02-01 14:32:54,369 | client_manager.py:66 | Registered client with id: LesCorts_0
INFO logger 2024-02-01 14:32:54,369 | client_manager.py:66 | Registered client with id: LesCorts_1
INFO logger 2024-02-01 14:32:54,370 | client_manager.py:66 | Registered client with id: LesCorts_2
INFO logger 2024-02-01 14:32:54,370 | client_manager.py:66 | Registered client with id: LesCorts_3
INFO logger 2024-02-01 14:32:54,370 | client_manager.py:66 | Registered client with id: LesCorts_4
INFO logger 2024-02-01 14:32:54,370 | client_manager.py:66 | Registered client with id: PobleSec_0
INFO logger 2024-02-01 14:32:54,370 | client_manager.py:66 | Registered client with id: PobleSec_1
INFO logger 2024-02-01 14:32:54,370 | client_manager.py:66 | Registered client with id: PobleSec_2
INFO logger 2024-02-01 14:32:54,370 | client_manager.py:66 | Registered client with id: PobleSec_3
INFO logger 2024-02-01 14:32:54,370 | client_manager.py:66 | Registered client with id: PobleSec_4
INFO logger 2024-02-01 14:32:54,370 | server.py:82 | Client manager initialized!
INFO logger 2024-02-01 14:32:54,370 | server.py:64 | Aggregation algorithm: FedAvg()
INFO logger 2024-02-01 14:32:54,370 | client_manager.py:88 | Parameter c=0.0. Sampled 1 client(s): ['PobleSec_3']
INFO logger 2024-02-01 14:32:56,276 | server.py:96 | Starting FL rounds
INFO logger 2024-02-01 14:32:56,277 | client_manager.py:88 | Parameter c=1.0. Sampled 15 client(s): ['LesCorts_1', 'PobleSec_2', 'PobleSec_4', 'ElBorn_0', 'ElBorn_4', 'LesCorts_3', 'LesCorts_2', 'PobleSec_3', 'LesCorts_4', 'ElBorn_2', 'ElBorn_3', 'LesCorts_0', 'PobleSec_0', 'PobleSec_1', 'ElBorn_1']
INFO logger 2024-02-01 14:32:57,663 | train_utils.py:153 | Best Loss: 0.0002896100798708915
INFO logger 2024-02-01 14:32:58,664 | train_utils.py:153 | Best Loss: 0.00048219764949827213
INFO logger 2024-02-01 14:32:59,834 | train_utils.py:153 | Best Loss: 0.0004605070486166111
INFO logger 2024-02-01 14:33:00,300 | train_utils.py:153 | Best Loss: 0.00016069088518115633
INFO logger 2024-02-01 14:33:00,556 | train_utils.py:153 | Best Loss: 2.704441241170887e-05
INFO logger 2024-02-01 14:33:00,929 | train_utils.py:153 | Best Loss: 0.0004772753332202372
INFO logger 2024-02-01 14:33:01,279 | train_utils.py:153 | Best Loss: 0.00021486838037769
INFO logger 2024-02-01 14:33:02,054 | train_utils.py:153 | Best Loss: 0.00046282758760288006
INFO logger 2024-02-01 14:33:02,804 | train_utils.py:153 | Best Loss: 0.00017418319152461158
INFO logger 2024-02-01 14:33:03,194 | train_utils.py:153 | Best Loss: 2.86163878345925e-05
INFO logger 2024-02-01 14:33:03,522 | train_utils.py:153 | Best Loss: 6.096589588222728e-05
INFO logger 2024-02-01 14:33:03,868 | train_utils.py:153 | Best Loss: 0.0005857830156425113
INFO logger 2024-02-01 14:33:04,826 | train_utils.py:153 | Best Loss: 0.000442783231663657
INFO logger 2024-02-01 14:33:05,852 | train_utils.py:153 | Best Loss: 0.0004338021676136753
Python 3.11.5 (main, Sep 11 2023, 13:54:46) [GCC 11.2.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.17.2 -- An enhanced Interactive Python. Type '?' for help.
INFO logger 2024-02-01 14:33:06,293 | train_utils.py:153 | Best Loss: 2.6967046345957523e-05
INFO logger 2024-02-01 14:33:06,356 | server.py:212 | [Global round 1] Aggregating local models...
INFO logger 2024-02-01 14:33:06,358 | client_manager.py:88 | Parameter c=0.0. Sampled 1 client(s): ['ElBorn_4']
RNN(
  (rnn): RNN(11, 128, batch_first=True)
  (MLP_layers): Sequential(
    (0): Linear(in_features=128, out_features=5, bias=True)
  )
)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
File ~/code/Fed-Time-Series-Forecasting/main.py:122
    119     args.outlier_columns = outlier_columns
    120     args.outlier_kwargs = outlier_kwargs
--> 122 main(args)
File ~/code/Fed-Time-Series-Forecasting/main.py:46, in main(args)
     41 # federated local params
     42 local_train_params = {"epochs": args.epochs, "optimizer": args.optimizer, "lr": args.lr,
     43                     "criterion": args.criterion, "early_stopping": args.local_early_stopping,
     44                     "patience": args.local_patience, "device": args.device
     45                     }
---> 46 global_model, history = fit(
     47                             model,
     48                             client_X_train,
     49                             client_y_train,
     50                             client_X_val,
     51                             client_y_val,
     52                             local_train_params=local_train_params,
     53                             args = args,
     54                             wandb_ins=wandb_instance)
     56 validation_dict = inference(
     57                 global_model,
     58                 client_X_train,
   (...)
     64                 y_scalers,
     65                 args)
File ~/code/Fed-Time-Series-Forecasting/fl_trainer.py:134, in fit(model, X_train, y_train, X_val, y_val, exogenous_data_train, exogenous_data_val, idxs, log_per, client_creation_fn, local_train_params, aggregation_params, use_carbontracker, args, wandb_ins)
    123 server = Server(
    124     client_proxies=client_proxies, # the client representations
    125     aggregation=args.aggregation, # the aggregation algorithm
   (...)
    129     model=copy.deepcopy(model)
    130 )
    131 # Note that the client manager instance will be initialized automatically. You can define your own client manager.
    132
    133 # train with FL
--> 134 model_params, history = server.fit(args.fl_rounds, args.fraction, use_carbontracker=use_carbontracker,
    135                                    wandb_ins=wandb_ins)
    137 params_dict = zip(model.state_dict().keys(), model_params)
    138 state_dict = OrderedDict({k: torch.Tensor(v) for k, v in params_dict})
File ~/code/Fed-Time-Series-Forecasting/ml/fl/server/server.py:121, in Server.fit(self, num_rounds, fraction, fraction_args, use_carbontracker, wandb_ins)
    117 # evaluate global model
    118 # test_metrics = self.evaluate_round(fl_round=fl_round,
    119 #                     history=history)
    120 random_net = copy.deepcopy(self.client_manager.sample(0.)[0])
--> 121 test_metrics = self.random_evaluate(self.global_val_loaders, self.global_model, net=random_net)
    122 for key_ in test_metrics.keys():
    123     wandb_ins.log({f"{key_}/val_mse": test_metrics[key_]['MSE'],
    124                f"{key_}/val_rmse": test_metrics[key_]['RMSE'],
    125                f"{key_}/val_mae": test_metrics[key_]['MAE'],
   (...)
    128                f"{key_}/flr": fl_round
    129                })
File ~/code/Fed-Time-Series-Forecasting/ml/fl/server/server.py:284, in Server.random_evaluate(self, val_loader, model, params, method, verbose, net)
    278     params["criterion"] = torch.nn.MSELoss()
    280 # if model:
    281 #     self.set_parameters(model)
    282 # import IPython
    283 # IPython.embed()
--> 284 self.set_parameters(self.model_in, self.global_model)
    285 test_result = {}
    286 # import IPython
    287 # IPython.embed()
AttributeError: 'SimpleClientProxy' object has no attribute 'net'